//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using MOL.EFDAL.Models;
using System.Collections.Generic;
using System.Linq;

namespace MOL.EFDAL.Repository
{
    public partial class MOL_Owner_Repository : EFRepository<MOL_Owner>
    {
        public MOL_Owner_Repository()
        {
            Context = new MOLEFEntities();
        }

        public MOL_Owner_Repository(MOLEFEntities context) : base(context)
        {

        }
        /// <summary>
        /// The get owner by id no.
        /// </summary>
        /// <param name="ownerIdNo">
        /// The owner id no.
        /// </param>
        /// <returns>
        /// The <see cref="MOL_Owner"/>.
        /// </returns>
        public MOL_Owner GetOwnerByIdNo(string ownerIdNo)
        {
            return this.SingleOrDefault(s => s.IdNo == ownerIdNo);
        }

        /// <summary>
        /// Gets the owner by IdNumber and establishment PK.
        /// </summary>
        /// <param name="ownerIdNo">The owner identifier no.</param>
        /// <param name="establishmentId">The establishment identifier.</param>
        /// <returns></returns>
        public MOL_Owner GetOwnerByIdNoAndEstablishmentId(string ownerIdNo, long establishmentId)
        {
            return this.SingleOrDefault(w => w.MOL_UnifiedNumber.Where(u => u.MOL_Establishment.FirstOrDefault(s => s.PK_EstablishmentId == establishmentId) != null).Any() && w.IdNo == ownerIdNo);
        }

        public MOL_Owner GetOwnerByIdNoAndUnifiedNumberID(long idNo, long unifiedNumID)
        {
            return (from owner in Context.MOL_Owner join unifiedNumber in Context.MOL_UnifiedNumber on owner.PK_OwnerId equals unifiedNumber.FK_OwnerId where owner.IdNo == idNo.ToString() && unifiedNumber.PK_UnifiedNumberId == unifiedNumID select owner).SingleOrDefault<MOL_Owner>();
        }

        /// <summary>
        /// Gets beneficiary details (owner details including establishments and laborers information) for social development service.
        /// </summary>
        /// <param name="idNumber">Beneficiary's Id Number</param>
        /// <returns></returns>
        public List<SocialDevelopmentBeneficiaryDetails> GetBeneficiaryDetails(string idNumber)
        {
            return (from o in Context.MOL_Owner
                    join un in Context.MOL_UnifiedNumber on new { FK_OwnerId = o.PK_OwnerId } equals new { FK_OwnerId = un.FK_OwnerId.Value } into un_join
                    from un in un_join.DefaultIfEmpty()
                    join e in Context.MOL_Establishment
                          on new { FK_UnifiedNumberId = un.PK_UnifiedNumberId, FK_EstablishmentStatusId = 1 }
                      equals new { e.FK_UnifiedNumberId, FK_EstablishmentStatusId = e.FK_EstablishmentStatusId.Value } into e_join
                    from e in e_join.DefaultIfEmpty()
                    join l in Context.MOL_Laborer
                          on new { FK_EstablishmentId = e.PK_EstablishmentId, FK_LaborerStatusId = 1 }
                      equals new { l.FK_EstablishmentId, FK_LaborerStatusId = l.FK_LaborerStatusId.Value } into l_join
                    from l in l_join.DefaultIfEmpty()
                    join n in Context.Lookup_Nationality on new { FK_NationalityId = l.FK_NationalityId } equals new { FK_NationalityId = n.Id } into n_join
                    from n in n_join.DefaultIfEmpty()
                    join j in Context.Lookup_Job on new { FK_JobId = l.FK_JobId } equals new { FK_JobId = j.Id } into j_join
                    from j in j_join.DefaultIfEmpty()
                    where
                      o.IdNo == idNumber
                    select new SocialDevelopmentBeneficiaryDetails
                    {
                        OwnerId = o.PK_OwnerId,
                        OwnerIdNumber = o.IdNo,
                        OwnerName = o.Name,
                        EstablishmentId = e.PK_EstablishmentId,
                        EstablishmentLaborOfficeNumber = e.FK_LaborOfficeId,
                        EstablishmentSequenceNumber = e.SequenceNumber,
                        EstablishmentName = e.Name,
                        EstablishmentIsMainBranch = e.IsMainBranch,
                        LaborerId = l.PK_LaborerId,
                        LaborerIdNumber = l.IdNo,
                        LaborerFirstName = l.FirstName,
                        LaborerSecondName = l.SecondName,
                        LaborerThirdName = l.ThirdName,
                        LaborerFourthName = l.FourthName,
                        LaborerNationalityId = l.FK_NationalityId,
                        LaborerNationalityName = n.Name,
                        LaborerJobId = l.FK_JobId,
                        LaborerJobName = j.Name
                    }).ToList();
        }

        public MOL_Owner GetOwnerEstablishmentsByIdNo(long idNumber, List<int> excludedActivities)
        {
            // Avoid more database round trips for few records, use join and switch off lazy loading.
            // Note that context should never be shared accross threads.
            bool isLazyLoading = Context.Configuration.ProxyCreationEnabled;
            Context.Configuration.ProxyCreationEnabled = false;

            var owner = (from o in Context.MOL_Owner
                         join u in Context.MOL_UnifiedNumber on o.PK_OwnerId equals u.FK_OwnerId
                         join e in Context.MOL_Establishment on u.PK_UnifiedNumberId equals e.FK_UnifiedNumberId
                         join ea in Context.Lookup_EconomicActivity on e.Lookup_EconomicActivity.PK_EconomicActivityId equals ea.PK_EconomicActivityId
                         join eaMain in Context.Lookup_EconomicActivity on ea.FK_MainEconomicActivityId equals eaMain.PK_EconomicActivityId
                         where excludedActivities.Contains<int>(e.FK_SubEconomicActivityId.Value) == false && e.FK_EstablishmentStatusId == 1 && o.IdNo == idNumber.ToString()
                         // must perform Reference Fix up
                         select new
                         {
                             MOL_Owner = o,
                             MOL_UnifiedNumber = u,
                             MOL_Establishment = e,
                             Lookup_EconomicActivity = ea,
                             Lookup_EconomicActivity2 = eaMain
                         }
             ).ToArray().Select(e => e.MOL_Owner).FirstOrDefault<MOL_Owner>();

            Context.Configuration.ProxyCreationEnabled = isLazyLoading;

            return owner;
        }
    }
}

